using Azure.Storage.Blobs;  
using Azure.Storage.Blobs.Models;  
using Microsoft.Extensions.Configuration;  
using Microsoft.SemanticKernel.Connectors.OpenAI;  
using Microsoft.SemanticKernel.Experimental.Agents;  
using Shared.Models;  
using System.Text;  
  
namespace DocAssistant.Charty.Ai.Services.CodeInterpreter  
{  
    public interface ICodeInterpreterAgentService  
    {  
        Task<SupportingContentDto> GenerateChart(string userPrompt, string markdownTable);  
        string GenerateImageHtmlTag(SupportingContentDto contentDto);  
    }  
  
    public class CodeInterpreterAgentService : ICodeInterpreterAgentService  
    {  
        private readonly string _azureOpenAiEndpoint;  
        private readonly string _azureApiKey;  
        private readonly string _deploymentName;  
        private readonly BlobContainerClient _containerClient;  
        private readonly OpenAIFileService _fileService;  
  
        public CodeInterpreterAgentService(IConfiguration configuration, BlobServiceClient blobServiceClient)  
        {  
            _azureOpenAiEndpoint = configuration["KernelMemory:Services:AzureOpenAIText:Endpoint"];  
            _azureApiKey = configuration["KernelMemory:Services:AzureOpenAIText:APIKey"];  
            _deploymentName = configuration["KernelMemory:Services:AzureOpenAIText:AzureStorageContainer"];  
            var containerName = configuration["AzureStorageContainer"];  
            _containerClient = blobServiceClient.GetBlobContainerClient(containerName);  
            _fileService = new OpenAIFileService(new Uri(_azureOpenAiEndpoint), apiKey: _azureApiKey);  
        }  
  
        public async Task<SupportingContentDto> GenerateChart(string userPrompt, string markdownTable)  
        {  
            var agent = await new AgentBuilder()  
                            .WithAzureOpenAIChatCompletion(_azureOpenAiEndpoint, _deploymentName, _azureApiKey)  
                            .WithCodeInterpreter()  
                            .BuildAsync();  
  
            var mergedPrompt = GenerateChartDescription(userPrompt, markdownTable);  
            try  
            {  
                var thread = await agent.NewThreadAsync();  
                var imageName = Guid.NewGuid().ToString();  
                var imageUrl = await InvokeAgentAsync(agent, thread, imageName, mergedPrompt);  
  
                return new SupportingContentDto  
                {  
                    Title = "Generated Chart",  
                    Content = "Chart generated based on the provided data and prompt.",  
                    OriginUri = imageUrl,  
                    SupportingContentType = SupportingContentType.Charts  
                };  
            }  
            finally  
            {  
                await agent.DeleteAsync();  
            }  
        }  
  
        private async Task<string> InvokeAgentAsync(IAgent agent, IAgentThread thread, string imageName, string question)  
        {  
            await foreach (var message in thread.InvokeAsync(agent, question))  
            {  
                if (message.ContentType == ChatMessageType.Image)  
                {  
                    var filename = $"{imageName}.jpg";  
                    var path = Path.Combine(Path.GetTempPath(), filename);  
                    var content = await _fileService.GetFileContentAsync(message.Content);  
                    await using var outputStream = File.OpenWrite(path);  
                    await outputStream.WriteAsync(content.Data!.Value);  
                    var imageUrl = await UploadImageAsync(path);  
                    File.Delete(path);  
                    return imageUrl;  
                }  
            }  
            throw new Exception("No image generated by the agent.");  
        }  
  
        private async Task<string> UploadImageAsync(string filePath)  
        {  
            await _containerClient.CreateIfNotExistsAsync(PublicAccessType.BlobContainer);  
            string fileName = Path.GetFileName(filePath);  
            BlobClient blobClient = _containerClient.GetBlobClient(fileName);  
            await blobClient.UploadAsync(filePath, overwrite: true);  
            return blobClient.Uri.ToString();  
        }  
  
        private string GenerateChartDescription(string userPrompt, string data)  
        {  
            StringBuilder sb = new StringBuilder();  
            sb.AppendLine("<TypeOfCharts>");  
            sb.AppendLine("    • Line Chart: Shows trends over time.");  
            sb.AppendLine("    • Bar Chart: Compares quantities across categories.");  
            sb.AppendLine("    • Column Chart: Vertical bar chart.");  
            sb.AppendLine("    • Pie Chart: Displays parts of a whole.");  
            sb.AppendLine("    • Donut Chart: Pie chart with a center hole.");  
            sb.AppendLine("    • Area Chart: Line chart with filled area below the line.");  
            sb.AppendLine("    • Scatter Chart: Displays relationships between two data sets.");  
            sb.AppendLine("    • Bubble Chart: Scatter chart with bubble sizes representing an additional dimension.");  
            sb.AppendLine("    • Histogram: Shows data distribution.");  
            sb.AppendLine("    • Candlestick Chart: Used in financial analysis for stock prices.");  
            sb.AppendLine("    • Combo Chart: Combines multiple chart types.");  
            sb.AppendLine("    • Gauge: Displays a value within a range, like a speedometer.");  
            sb.AppendLine("    • GeoChart: Maps data geographically.");  
            sb.AppendLine("    • TreeMap: Hierarchical data as nested rectangles.");  
            sb.AppendLine("    • Timeline: Visualizes events over time.");  
            sb.AppendLine("    • Gantt Chart: Project management tool for tasks over time.");  
            sb.AppendLine("    • Org Chart: Shows organizational structures.");  
            sb.AppendLine("    • Sankey Diagram: Displays flow and relationships.");  
            sb.AppendLine("    • Calendar Chart: Data over days, weeks, or months.");  
            sb.AppendLine("    • Stepped Area Chart: Area chart with steps.");  
            sb.AppendLine("</TypeOfCharts>");  
            sb.AppendLine();  
            sb.AppendLine("Based on user prompt: " + userPrompt);  
            sb.AppendLine("Based on data below: " + data);  
            return sb.ToString();  
        }  
  
        public string GenerateImageHtmlTag(SupportingContentDto contentDto)  
        {  
            if (contentDto == null || string.IsNullOrEmpty(contentDto.OriginUri))  
            {  
                throw new ArgumentException("Invalid SupportingContentDto provided.");  
            }  
  
            return $"<img src=\"{contentDto.OriginUri}\" alt=\"{contentDto.Title}\" />";  
        }  
    }  
}  
